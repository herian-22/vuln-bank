name: CI Security Check

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Izin untuk push ke GitHub Container Registry
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}

  secret_scan:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    needs: build_and_push
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz -O gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz && sudo mv gitleaks /usr/local/bin/
      - name: Run Gitleaks Scan
        run: gitleaks detect --report-path gitleaks-report.json --report-format json -v
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks-report, path: gitleaks-report.json }
      - name: Parse Gitleaks Report for Summary
        id: parse_report
        if: always()
        # Anda perlu membuat skrip parse_reports.py
        run: |
          SUMMARY="Gitleaks found $(jq 'length' gitleaks-report.json) potential secrets."
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

  sast_scan:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      security-events: write # Izin untuk upload hasil SARIF
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit Scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json
          bandit -r . -f sarif -o bandit.sarif
        continue-on-error: false # GAGALKAN build jika ada temuan
      - uses: actions/upload-artifact@v4
        with: { name: bandit-report, path: bandit-report.json }
      - name: Upload Bandit SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
      - name: Parse Bandit Report for Summary
        id: parse_report
        if: always()
        run: |
          HIGH=$(jq '.metrics._totals."SEVERITY.HIGH"' bandit-report.json)
          MEDIUM=$(jq '.metrics._totals."SEVERITY.MEDIUM"' bandit-report.json)
          SUMMARY="Bandit found $HIGH high, $MEDIUM medium severity issues."
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      security-events: write # Izin untuk upload hasil SARIF
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Trivy Scan
        run: |
          trivy image --format json --output trivy-report.json --severity CRITICAL,HIGH ghcr.io/${{ github.repository }}:${{ github.sha }}
          trivy image --format sarif --output trivy.sarif --severity CRITICAL,HIGH ghcr.io/${{ github.repository }}:${{ github.sha }}
        continue-on-error: false # GAGALKAN build jika ada temuan
      - uses: actions/upload-artifact@v4
        with: { name: trivy-report, path: trivy-report.json }
      - name: Upload Trivy SARIF to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
      - name: Parse Trivy Report for Summary
        id: parse_report
        if: always()
        run: |
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-report.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-report.json)
          SUMMARY="Trivy found $CRITICAL critical, $HIGH high severity vulnerabilities."
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

  # Anda dapat menambahkan kembali job dast dan misconfig_scan di sini jika diperlukan

notification_hub:
    name: Send Smart Notification
    runs-on: ubuntu-latest
    if: always() # Job ini akan selalu berjalan untuk melaporkan status akhir
    needs: [secret_scan, sast_scan, container_scan]
    steps:
      - name: Determine Status and Send Webhook
        run: |
          # --- Cek Status Pipeline ---
          if [ "${{ needs.sast_scan.result }}" == "failure" ] || \
             [ "${{ needs.container_scan.result }}" == "failure" ]; then
            STATUS="Gagal"
            COLOR=15158332 # Merah
            TITLE="🚨 Peringatan: CI Security Pipeline Gagal!"
            DESCRIPTION="Salah satu pemindaian keamanan gagal. Harap segera tinjau log untuk detail lengkap dan lakukan perbaikan."
          else
            STATUS="Lolos"
            COLOR=3066993 # Hijau
            TITLE="✅ CI Security Pipeline Berhasil"
            DESCRIPTION="Semua pemindaian keamanan berhasil dilewati."
          fi

          # --- Membuat Payload JSON Berdasarkan Status ---
          # Payload ini akan berisi semua detail jika GAGAL (menggantikan "create issue")
          # atau ringkasan singkat jika LOLOS.
          JSON_PAYLOAD=$(cat <<EOF
          {
            "username": "DevSecOps Bot",
            "avatar_url": "https://i.imgur.com/fJc1mOa.png",
            "content": "**Status Pipeline: $STATUS**",
            "embeds": [{
              "title": "$TITLE",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": "$COLOR",
              "description": "$DESCRIPTION",
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Pemicu",
                  "value": "${{ github.actor }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "\`${{ github.sha }}\`"
                },
                {
                  "name": "🛡️ Secret Scan (Gitleaks)",
                  "value": "${{ needs.secret_scan.outputs.summary }}"
                },
                {
                  "name": "🔬 SAST (Bandit)",
                  "value": "${{ needs.sast_scan.outputs.summary }}"
                },
                {
                  "name": "📦 Container Scan (Trivy)",
                  "value": "${{ needs.container_scan.outputs.summary }}"
                }
              ],
              "footer": {
                "text": "Laporan Dibuat Otomatis"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%S.000Z')"
            }]
          }
          EOF
          )

          # --- Kirim Payload ke Webhook ---
          curl -X POST -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}