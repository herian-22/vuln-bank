name: DevSecOps Security Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:


jobs:
  build:
    name: Build and Upload Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t vuln-bank:${{ github.sha }} .
      - name: Save Docker image
        run: docker save vuln-bank:${{ github.sha }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  secret_scan:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz -O gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
      - name: Run Gitleaks Scan
        run: gitleaks detect --report-path gitleaks-report.json --report-format json -v
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks-report, path: gitleaks-report.json }
      - name: Parse Gitleaks Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py gitleaks gitleaks-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  sast_scan:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit Scan
       
        run: pip install bandit && bandit -r . -f json -o bandit-report.json
        continue-on-error: false
      - uses: actions/upload-artifact@v4
        with: { name: bandit-report, path: bandit-report.json }
      - name: Parse Bandit Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py bandit bandit-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with: { name: docker-image }
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Run Trivy Scan

        run: trivy image --format json --output trivy-report.json --severity CRITICAL,HIGH vuln-bank:${{ github.sha }}
        continue-on-error: false
      - uses: actions/upload-artifact@v4
        with: { name: trivy-report, path: trivy-report.json }
      - name: Parse Trivy Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py trivy trivy-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  misconfig_scan:
    name: Misconfiguration Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Run Trivy Misconfiguration Scan
        run: trivy config --format json --output misconfig-report.json .
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: misconfig-report, path: misconfig-report.json }
      - name: Parse Trivy Misconfig Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py trivy-misconfig misconfig-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_zap_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Run Application using Docker Compose
        run: docker-compose up -d
      - name: Set workspace permissions
        run: sudo chmod -R 777 ${{ github.workspace }}
      - name: Run ZAP Scan
        run: |
          docker run --network host -v ${{ github.workspace }}:/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://127.0.0.1:5000 -J zap-report.json -l PASS
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: zap-report, path: zap-report.json }
      - name: Parse ZAP Report for Summary
        id: parse_zap_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py zap zap-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  notify:
    name: Send Scan Summary Notification
    runs-on: ubuntu-latest
    if: always() 
    needs: [secret_scan, sast_scan, container_scan, misconfig_scan, dast]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Send Discord Webhook Notification
        run: |
          chmod +x scripts/generate_payload.sh
          PIPELINE_STATUS="Lolos"
          PIPELINE_COLOR=3066993
          if [ "${{ needs.secret_scan.result }}" == "failure" ] || \
             [ "${{ needs.sast_scan.result }}" == "failure" ] || \
             [ "${{ needs.container_scan.result }}" == "failure" ] || \
             [ "${{ needs.dast.result }}" == "failure" ] || \
             [ "${{ needs.misconfig_scan.result }}" == "failure" ]; then
            PIPELINE_STATUS="Gagal"
            PIPELINE_COLOR=15158332
          fi
          
          JSON_PAYLOAD=$(./scripts/generate_payload.sh \
            "$PIPELINE_STATUS" \
            "${{ github.repository }}" \
            "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            "$PIPELINE_COLOR" \
            "${{ needs.secret_scan.outputs.summary }}" \
            "${{ needs.sast_scan.outputs.summary }}" \
            "${{ needs.container_scan.outputs.summary }}" \
            "${{ needs.misconfig_scan.outputs.summary }}" \
            "${{ needs.dast.outputs.summary }}" \
            "${{ github.sha }}" \
            "${{ github.actor }}" \
          )
          
          curl -X POST -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

 
  create_issue:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    
    if: failure()
    needs: [secret_scan, sast_scan, container_scan, misconfig_scan, dast]
    steps:
      - name: Create Issue Body
        id: issue_body
        run: |
          BODY=$(cat <<EOF
          ### :warning: DevSecOps Pipeline Failure
          A security scan has failed. Please review the findings below and address them.
          **Repository:** ${{ github.repository }}
          **Commit:** \`${{ github.sha }}\`
          **Triggered by:** @${{ github.actor }}
          ---
          **Secret Scan (Gitleaks):**
          ${{ needs.secret_scan.outputs.summary }}
          ---
          **SAST (Bandit):**
          ${{ needs.sast_scan.outputs.summary }}
          ---
          **Container Scan (Trivy):**
          ${{ needs.container_scan.outputs.summary }}
          ---
          **Misconfiguration Scan (Trivy):**
          ${{ needs.misconfig_scan.outputs.summary }}
          ---
          **DAST (OWASP ZAP):**
          ${{ needs.dast.outputs.summary }}
          EOF
          )
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue
        uses: actions/create-issue@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "DevSecOps Pipeline Failure for commit ${{ github.sha }}"
          body: ${{ steps.issue_body.outputs.body }}
          labels: security, bug