name: DevSecOps Security Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Upload Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t vuln-bank:${{ github.sha }} .
      - name: Save Docker image
        run: docker save vuln-bank:${{ github.sha }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  secret_scan:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz -O gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
      - name: Run Gitleaks Scan
        run: gitleaks detect --report-path gitleaks-report.json --report-format json -v
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: gitleaks-report, path: gitleaks-report.json }
      - name: Parse Gitleaks Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py gitleaks gitleaks-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  sast_scan:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit Scan
        run: pip install bandit && bandit -r . -f json -o bandit-report.json
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: bandit-report, path: bandit-report.json }
      - name: Parse Bandit Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py bandit bandit-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  container_scan:
    name: Container Scanning (Trivy)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4 # Perlu checkout kode untuk mendapatkan script python
      - uses: actions/download-artifact@v4
        with: { name: docker-image }
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
      - name: Run Trivy Scan
        run: trivy image --format json --output trivy-report.json --severity CRITICAL,HIGH vuln-bank:${{ github.sha }}
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: trivy-report, path: trivy-report.json }
      - name: Parse Trivy Report for Summary
        id: parse_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py trivy trivy-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build
    outputs:
      summary: ${{ steps.parse_zap_report.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Run Application using Docker Compose
        run: docker-compose up -d
      - name: Set workspace permissions
        run: sudo chmod -R 777 ${{ github.workspace }}
      - name: Run ZAP Scan
        run: |
          docker run --network host -v ${{ github.workspace }}:/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://127.0.0.1:5000 -J zap-report.json -l PASS
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: zap-report, path: zap-report.json }
      - name: Parse ZAP Report for Summary
        id: parse_zap_report
        if: always()
        run: |
          SUMMARY=$(python3 scripts/parse_reports.py zap zap-report.json)
          echo 'summary<<EOF' >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  notify:
    name: Send Scan Summary Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [secret_scan, sast_scan, container_scan, dast]
    steps:
      - name: Send Discord Webhook Notification
        run: |
          GITLEAKS_SUMMARY="${{ needs.secret_scan.outputs.summary }}"
          BANDIT_SUMMARY="${{ needs.sast_scan.outputs.summary }}"
          TRIVY_SUMMARY="${{ needs.container_scan.outputs.summary }}"
          DAST_SUMMARY="${{ needs.dast.outputs.summary }}"

          PIPELINE_STATUS="Lolos"
          PIPELINE_COLOR=3066993 # Hijau
          if [ "${{ needs.secret_scan.result }}" == "failure" ] || \
             [ "${{ needs.sast_scan.result }}" == "failure" ] || \
             [ "${{ needs.container_scan.result }}" == "failure" ] || \
             [ "${{ needs.dast.result }}" == "failure" ]; then
            PIPELINE_STATUS="Gagal"
            PIPELINE_COLOR=15158332 # Merah
          fi
          
         
          GITLEAKS_SUMMARY_JSON=$(echo "$GITLEAKS_SUMMARY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed -z 's/\n/\\n/g')
          BANDIT_SUMMARY_JSON=$(echo "$BANDIT_SUMMARY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed -z 's/\n/\\n/g')
          TRIVY_SUMMARY_JSON=$(echo "$TRIVY_SUMMARY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed -z 's/\n/\\n/g')
          DAST_SUMMARY_JSON=$(echo "$DAST_SUMMARY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed -z 's/\n/\\n/g')

          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "Laporan Ringkasan DevSecOps Pipeline",
              "description": "Status Pipeline: **'${PIPELINE_STATUS}'**\nRepositori: **${{ github.repository }}**",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": '${PIPELINE_COLOR}',
              "fields": [
                { "name": "Secret Scanning (Gitleaks)", "value": "```'${GITLEAKS_SUMMARY_JSON}'```" },
                { "name": "SAST (Bandit)", "value": "```'${BANDIT_SUMMARY_JSON}'```" },
                { "name": "Container Scanning (Trivy)", "value": "```'${TRIVY_SUMMARY_JSON}'```" },
                { "name": "DAST (OWASP ZAP)", "value": "```'${DAST_SUMMARY_JSON}'```" }
              ],
              "footer": { "text": "Commit: ${{ github.sha }} oleh ${{ github.actor }}" }
            }]
          }' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}