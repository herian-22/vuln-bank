name: DevSecOps Security Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_name: vuln-bank:${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t vuln-bank:${{ github.sha }} .

  
  security_scans:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        scan_type:
          - name: "Secret Scanning (Gitleaks)"
            command: "gitleaks detect --report-path gitleaks-report.json --report-format json -v"
            artifact_name: "gitleaks-report"
            artifact_path: "gitleaks-report.json"
            continue_on_error: true
          - name: "SAST (Bandit)"
            command: "pip install bandit && bandit -r . -f json -o bandit-report.json"
            artifact_name: "bandit-sast-report"
            artifact_path: "bandit-report.json"
            continue_on_error: true
          - name: "SCA (Trivy - requirements.txt)"
            command: "trivy fs --format json --output trivy-sca-report.json --severity CRITICAL,HIGH requirements.txt"
            artifact_name: "trivy-sca-report"
            artifact_path: "trivy-sca-report.json"
            continue_on_error: true
          - name: "Misconfiguration Scanning (Trivy - Dockerfile)"
            command: "trivy config --format json --output trivy-config-report.json --severity CRITICAL,HIGH ."
            artifact_name: "trivy-misconfig-report"
            artifact_path: "trivy-config-report.json"
            continue_on_error: true
          - name: "Container Scanning (Trivy)"
            command: "trivy image --format json --output trivy-container-report.json --severity CRITICAL,HIGH vuln-bank:${{ needs.build.outputs.image_name }}"
            artifact_name: "trivy-container-report"
            artifact_path: "trivy-container-report.json"
            continue_on_error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run ${{ matrix.scan_type.name }}
        run: ${{ matrix.scan_type.command }}
        continue-on-error: ${{ matrix.scan_type.continue_on_error }}

      - name: Upload ${{ matrix.scan_type.name }} Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scan_type.artifact_name }}
          path: ${{ matrix.scan_type.artifact_path }}

  
  dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Run Application using Docker Compose
        run: docker-compose up -d
        
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://127.0.0.1:5000'
          cmd_options: '-J zap-report.json'
          fail_action: false 

      - name: Upload DAST Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: zap-report.json

  
  notify:
    name: Notify on Critical Vulnerabilities
    runs-on: ubuntu-latest
    needs: [security_scans, dast]
    if: failure()
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'A09EFBNCQGL' 
          slack-message: "ðŸš¨ **Kerentanan Kritis Terdeteksi** ðŸš¨\n\nPipeline keamanan untuk repositori *${{ github.repository }}* gagal.\n\n*Commit*: `${{ github.sha }}`\n*Pemicu*: `${{ github.actor }}`\n\nSilakan segera periksa log untuk detailnya:\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}