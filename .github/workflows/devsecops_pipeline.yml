name: DevSecOps Security Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Upload Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build -t vuln-bank:${{ github.sha }} .
      - name: Save Docker image
        run: docker save vuln-bank:${{ github.sha }} -o image.tar
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  security_scans:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        scan_type:
          - name: "Secret Scanning (Gitleaks)"
            command: "gitleaks detect --report-path gitleaks-report.json --report-format json -v"
            artifact_name: "gitleaks-report"
            artifact_path: "gitleaks-report.json"
            continue-on-error: true
          - name: "SAST (Bandit)"
            command: "pip install bandit && bandit -r . -f json -o bandit-report.json"
            artifact_name: "bandit-sast-report"
            artifact_path: "bandit-report.json"
            continue-on-error: true
          - name: "Container Scanning (Trivy)"
            command: "trivy image --format json --output trivy-container-report.json --severity CRITICAL,HIGH vuln-bank:${{ github.sha }}"
            artifact_name: "trivy-container-report"
            artifact_path: "trivy-container-report.json"
            continue-on-error: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Install Tools
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
      - name: Run ${{ matrix.scan_type.name }}
        run: ${{ matrix.scan_type.command }}
        # PERBAIKAN: Menggunakan sintaks yang benar (continue-on-error)
        continue-on-error: ${{ matrix.scan_type.continue-on-error }}
      - name: Upload Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.scan_type.artifact_name }}
          path: ${{ matrix.scan_type.artifact_path }}

dast:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose
      - name: Run Application using Docker Compose
        run: docker-compose up -d
        
      
      - name: Set workspace permissions
        run: sudo chmod -R 777 ${{ github.workspace }}

      - name: Run ZAP Scan

        run: |
          docker run \
            --network host \
            -v ${{ github.workspace }}:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://127.0.0.1:5000 \
            -J zap-report.json

      - name: Upload DAST Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: zap-report.json

  notify:
    name: Notify on Critical Failure
    runs-on: ubuntu-latest
    needs: [security_scans, dast]
    if: failure()
    steps:
      - name: Send Discord Webhook Notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "embeds": [{
              "title": "ðŸš¨ Kerentanan Kritis Terdeteksi ðŸš¨",
              "description": "Pipeline keamanan untuk repositori **${{ github.repository }}** gagal.",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "color": 15158332,
              "fields": [
                {
                  "name": "Commit",
                  "value": "`${{ github.sha }}`",
                  "inline": true
                },
                {
                  "name": "Pemicu",
                  "value": "${{ github.actor }}",
                  "inline": true
                }
              ],
              "footer": {
                "text": "Kegagalan terjadi pada job DAST atau Trivy. Silakan periksa log."
              }
            }]
          }' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}